--------------------------------
-- normal case
--------------------------------
-- PL/pgSQL function
CREATE FUNCTION plpgsql_f(int4, int4, int4, text) RETURNS record AS
$$
DECLARE
    ret target;
BEGIN
    IF $1 = 61 THEN
    	RETURN NULL;
    END IF;
    IF $1 = 41 THEN
        RAISE EXCEPTION 'field 1 is error value';
    END IF;
	ret.id := $2 + $3;
	ret.str := $4;
	ret.master := $1;
	RETURN ret;
END;
$$ LANGUAGE plpgsql STRICT;
-- using OUT paramator function
CREATE FUNCTION using_out_f(int4, int4, int4, text, OUT int4, OUT text, OUT int4)
    RETURNS record AS
$$
    SELECT plpgsql_f($1, $2, $3, $4);
$$ LANGUAGE SQL;
TRUNCATE target;
INSERT INTO target VALUES(1, 'dummy', 1);
-- FILTER option parse error
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=variadic_f(int, text)'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function variadic_f(integer, text) does not exist
HINT:  No function matches the given name and argument types.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=overload_f'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function overload_f() is not unique
HINT:  Could not choose a best candidate function.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=using_out_f()'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function using_out_f() does not exist
HINT:  No function matches the given name and argument types.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=using_out_f(int4, int4, int4)'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function using_out_f(integer, integer, integer) does not exist
HINT:  No function matches the given name and argument types.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=outarg_f()'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function return row and target table row do not match
DETAIL:  Returned type integer at ordinal position 2, but target table text.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=setof_f()'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  filter function must not return set
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=using_out_f(int4, int4, text)' -o FORCE_NOT_NULL=id
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  cannot use FILTER with FORCE_NOT_NULL
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data7.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=type_mismatch_f()'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function return row and target table row do not match
DETAIL:  Returned row contains 2 attribute(s), but target table expects 3.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=no_create_f()'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function no_create_f() does not exist
HINT:  No function matches the given name and argument types.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data7.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=rec_mismatch_f()'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function return row and target table row do not match
DETAIL:  Returned type unknown at ordinal position 2, but target table text.
DETAIL: query was: SELECT * FROM pg_bulkload($1)
-- FILTER option error
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER="f1'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function call syntax error: "f1
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=  (int4)'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function call syntax error:   (int4)
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER="f1" int4, int4, text)'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function call syntax error: "f1" int4, int4, text)
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=f1(int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4,int4)'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  functions cannot have more than 100 arguments
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=f1(int4, int4, text)    aaa'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function call syntax error: f1(int4, int4, text)    aaa
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=f1(numeric((1,2)))'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function call syntax error: f1(numeric((1,2)))
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=f1(numeric(1, 2) (1, 2))'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function call syntax error: f1(numeric(1, 2) (1, 2))
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=f1(    , text)'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  function call syntax error: f1(    , text)
DETAIL: query was: SELECT * FROM pg_bulkload($1)
\! pg_bulkload -d contrib_regression data/csv4.ctl -i data/data6.csv -l results/filter_e.log -P results/filter_e1.prs -u results/filter_e1.dup -o 'FILTER=f1(double)'
NOTICE: BULK LOAD START
ERROR: query failed: ERROR:  type "double" does not exist
DETAIL: query was: SELECT * FROM pg_bulkload($1)
SET enable_seqscan = on;
SET enable_indexscan = off;
SET enable_bitmapscan = off;
SELECT * FROM target ORDER BY id;
 id |  str  | master 
----+-------+--------
  1 | dummy |      1
(1 row)

SET enable_seqscan = off;
SET enable_indexscan = on;
SET enable_bitmapscan = off;
SELECT * FROM target ORDER BY id;
 id |  str  | master 
----+-------+--------
  1 | dummy |      1
(1 row)

-- FILTER option test
\pset null (null)
\! pg_bulkload -d contrib_regression data/csv5.ctl -o "PARSE_ERRORS=50" -i data/data6.csv -l results/filter1.log -P results/filter1.prs -u results/filter1.dup -o 'FILTER=using_out_f(int4, int4, int4, text)'
NOTICE: BULK LOAD START
NOTICE: BULK LOAD END
	0 Rows skipped.
	3 Rows successfully loaded.
	5 Rows not loaded due to parse errors.
	0 Rows not loaded due to duplicate errors.
	0 Rows replaced with new rows.
WARNING: some rows were not loaded due to errors.
\! awk -f data/adjust.awk results/filter1.log

pg_bulkload 3.0.2 on <TIMESTAMP>

INFILE = .../data6.csv
PARSE_BADFILE = .../filter1.prs
DUPLICATE_BADFILE = .../filter1.dup
LOGFILE = .../filter1.log
TABLE = public.target_like
TRUNCATE = YES
LIMIT = INFINITE
PARSE_ERRORS = 50
DUPLICATE_ERRORS = 0
ON_DUPLICATE_KEEP = NEW
VERBOSE = NO
CHECK_CONSTRAINTS = NO
TYPE = CSV
SKIP = 0
DELIMITER = ,
QUOTE = "\""
ESCAPE = "\""
NULL = 
FILTER = using_out_f(int4, int4, int4, text)
WRITER = DIRECT

Parse error Record 1: Input Record 2: Rejected - column 1. missing data for argument 2
Parse error Record 2: Input Record 3: Rejected - column 5. extra data after last expected column
Parse error Record 3: Input Record 4: Rejected. field 1 is error value
Parse error Record 4: Input Record 5: Rejected - column 1. invalid input syntax for integer: "51a"
Parse error Record 5: Input Record 7: Rejected - column 2. missing data for argument 3

  0 Rows skipped.
  3 Rows successfully loaded.
  5 Rows not loaded due to parse errors.
  0 Rows not loaded due to duplicate errors.
  0 Rows replaced with new rows.

Run began on <TIMESTAMP>
Run ended on <TIMESTAMP>

CPU <TIME>s/<TIME>u sec elapsed <TIME> sec
SET enable_seqscan = on;
SET enable_indexscan = off;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
   id   |  str   | master 
--------+--------+--------
     25 | 14     |     11
 (null) | (null) | (null)
 (null) | (null) | (null)
(3 rows)

SET enable_seqscan = off;
SET enable_indexscan = on;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
   id   |  str   | master 
--------+--------+--------
     25 | 14     |     11
 (null) | (null) | (null)
 (null) | (null) | (null)
(3 rows)

\! pg_bulkload -d contrib_regression data/csv5.ctl -i data/data6.csv -l results/filter2.log -P results/filter2.prs -u results/filter2.dup -o "PARSE_ERRORS=5" --option FILTER=plpgsql_f
NOTICE: BULK LOAD START
NOTICE: BULK LOAD END
	0 Rows skipped.
	3 Rows successfully loaded.
	5 Rows not loaded due to parse errors.
	0 Rows not loaded due to duplicate errors.
	0 Rows replaced with new rows.
WARNING: some rows were not loaded due to errors.
\! awk -f data/adjust.awk results/filter2.log

pg_bulkload 3.0.2 on <TIMESTAMP>

INFILE = .../data6.csv
PARSE_BADFILE = .../filter2.prs
DUPLICATE_BADFILE = .../filter2.dup
LOGFILE = .../filter2.log
TABLE = public.target_like
TRUNCATE = YES
LIMIT = INFINITE
PARSE_ERRORS = 5
DUPLICATE_ERRORS = 0
ON_DUPLICATE_KEEP = NEW
VERBOSE = NO
CHECK_CONSTRAINTS = NO
TYPE = CSV
SKIP = 0
DELIMITER = ,
QUOTE = "\""
ESCAPE = "\""
NULL = 
FILTER = plpgsql_f
WRITER = DIRECT

Parse error Record 1: Input Record 2: Rejected - column 1. missing data for argument 2
Parse error Record 2: Input Record 3: Rejected - column 5. extra data after last expected column
Parse error Record 3: Input Record 4: Rejected. field 1 is error value
Parse error Record 4: Input Record 5: Rejected - column 1. invalid input syntax for integer: "51a"
Parse error Record 5: Input Record 7: Rejected - column 2. missing data for argument 3

  0 Rows skipped.
  3 Rows successfully loaded.
  5 Rows not loaded due to parse errors.
  0 Rows not loaded due to duplicate errors.
  0 Rows replaced with new rows.

Run began on <TIMESTAMP>
Run ended on <TIMESTAMP>

CPU <TIME>s/<TIME>u sec elapsed <TIME> sec
SET enable_seqscan = on;
SET enable_indexscan = off;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
   id   |  str   | master 
--------+--------+--------
     25 | 14     |     11
 (null) | (null) | (null)
 (null) | (null) | (null)
(3 rows)

SET enable_seqscan = off;
SET enable_indexscan = on;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
   id   |  str   | master 
--------+--------+--------
     25 | 14     |     11
 (null) | (null) | (null)
 (null) | (null) | (null)
(3 rows)

\! pg_bulkload -d contrib_regression data/csv5.ctl -i data/data6.csv -l results/filter3.log -P results/filter3.prs -u results/filter3.dup -o "PARSE_ERRORS=4" -o 'FILTER=plpgsql_f(int4, int4, int4, text)'
NOTICE: BULK LOAD START
NOTICE: BULK LOAD END
	0 Rows skipped.
	2 Rows successfully loaded.
	5 Rows not loaded due to parse errors.
	0 Rows not loaded due to duplicate errors.
	0 Rows replaced with new rows.
WARNING: some rows were not loaded due to errors.
\! awk -f data/adjust.awk results/filter3.log

pg_bulkload 3.0.2 on <TIMESTAMP>

INFILE = .../data6.csv
PARSE_BADFILE = .../filter3.prs
DUPLICATE_BADFILE = .../filter3.dup
LOGFILE = .../filter3.log
TABLE = public.target_like
TRUNCATE = YES
LIMIT = INFINITE
PARSE_ERRORS = 4
DUPLICATE_ERRORS = 0
ON_DUPLICATE_KEEP = NEW
VERBOSE = NO
CHECK_CONSTRAINTS = NO
TYPE = CSV
SKIP = 0
DELIMITER = ,
QUOTE = "\""
ESCAPE = "\""
NULL = 
FILTER = plpgsql_f(int4, int4, int4, text)
WRITER = DIRECT

Parse error Record 1: Input Record 2: Rejected - column 1. missing data for argument 2
Parse error Record 2: Input Record 3: Rejected - column 5. extra data after last expected column
Parse error Record 3: Input Record 4: Rejected. field 1 is error value
Parse error Record 4: Input Record 5: Rejected - column 1. invalid input syntax for integer: "51a"
Parse error Record 5: Input Record 7: Rejected - column 2. missing data for argument 3
Maximum parse error count exceeded - 5 error(s) found in input file

  0 Rows skipped.
  2 Rows successfully loaded.
  5 Rows not loaded due to parse errors.
  0 Rows not loaded due to duplicate errors.
  0 Rows replaced with new rows.

Run began on <TIMESTAMP>
Run ended on <TIMESTAMP>

CPU <TIME>s/<TIME>u sec elapsed <TIME> sec
SET enable_seqscan = on;
SET enable_indexscan = off;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
   id   |  str   | master 
--------+--------+--------
     25 | 14     |     11
 (null) | (null) | (null)
(2 rows)

SET enable_seqscan = off;
SET enable_indexscan = on;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
   id   |  str   | master 
--------+--------+--------
     25 | 14     |     11
 (null) | (null) | (null)
(2 rows)

\! pg_bulkload -d contrib_regression data/csv5.ctl -i data/data7.csv -l results/filter4.log -P results/filter4.prs -u results/filter4.dup -o 'FILTER=no_arg_f()'
NOTICE: BULK LOAD START
NOTICE: BULK LOAD END
	0 Rows skipped.
	5 Rows successfully loaded.
	0 Rows not loaded due to parse errors.
	0 Rows not loaded due to duplicate errors.
	0 Rows replaced with new rows.
\! awk -f data/adjust.awk results/filter4.log

pg_bulkload 3.0.2 on <TIMESTAMP>

INFILE = .../data7.csv
PARSE_BADFILE = .../filter4.prs
DUPLICATE_BADFILE = .../filter4.dup
LOGFILE = .../filter4.log
TABLE = public.target_like
TRUNCATE = YES
LIMIT = INFINITE
PARSE_ERRORS = 0
DUPLICATE_ERRORS = 0
ON_DUPLICATE_KEEP = NEW
VERBOSE = NO
CHECK_CONSTRAINTS = NO
TYPE = CSV
SKIP = 0
DELIMITER = ,
QUOTE = "\""
ESCAPE = "\""
NULL = 
FILTER = no_arg_f()
WRITER = DIRECT


  0 Rows skipped.
  5 Rows successfully loaded.
  0 Rows not loaded due to parse errors.
  0 Rows not loaded due to duplicate errors.
  0 Rows replaced with new rows.

Run began on <TIMESTAMP>
Run ended on <TIMESTAMP>

CPU <TIME>s/<TIME>u sec elapsed <TIME> sec
SET enable_seqscan = on;
SET enable_indexscan = off;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
 id |      str      | master 
----+---------------+--------
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
(5 rows)

SET enable_seqscan = off;
SET enable_indexscan = on;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
 id |      str      | master 
----+---------------+--------
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
  1 | call no_arg_f |      3
(5 rows)

\! pg_bulkload -d contrib_regression data/bin6.ctl -i data/data4.bin -l results/filter5.log -P results/filter5.prs -u results/filter5.dup -o "PARSE_ERRORS=4" -o FILTER=plpgsql_f
NOTICE: BULK LOAD START
NOTICE: BULK LOAD END
	0 Rows skipped.
	3 Rows successfully loaded.
	1 Rows not loaded due to parse errors.
	0 Rows not loaded due to duplicate errors.
	0 Rows replaced with new rows.
WARNING: some rows were not loaded due to errors.
\! awk -f data/adjust.awk results/filter5.log

pg_bulkload 3.0.2 on <TIMESTAMP>

INFILE = .../data4.bin
PARSE_BADFILE = .../filter5.prs
DUPLICATE_BADFILE = .../filter5.dup
LOGFILE = .../filter5.log
TABLE = public.target_like
TRUNCATE = YES
LIMIT = INFINITE
PARSE_ERRORS = 4
DUPLICATE_ERRORS = 0
ON_DUPLICATE_KEEP = NEW
VERBOSE = NO
CHECK_CONSTRAINTS = NO
TYPE = BINARY
SKIP = 0
PRESERVE_BLANKS = NO
STRIDE = 16
FILTER = plpgsql_f
COL = "INTEGER" (1 + 4)
COL = "INTEGER" (5 + 4)
COL = "INTEGER" (9 + 4)
COL = "INTEGER" (13 + 4)
WRITER = DIRECT

Parse error Record 1: Input Record 4: Rejected. field 1 is error value

  0 Rows skipped.
  3 Rows successfully loaded.
  1 Rows not loaded due to parse errors.
  0 Rows not loaded due to duplicate errors.
  0 Rows replaced with new rows.

Run began on <TIMESTAMP>
Run ended on <TIMESTAMP>

CPU <TIME>s/<TIME>u sec elapsed <TIME> sec
SET enable_seqscan = on;
SET enable_indexscan = off;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
 id | str | master 
----+-----+--------
 25 | 14  |     11
 45 | 24  |     21
 65 | 34  |     31
(3 rows)

SET enable_seqscan = off;
SET enable_indexscan = on;
SET enable_bitmapscan = off;
SELECT * FROM target_like ORDER BY id;
 id | str | master 
----+-----+--------
 25 | 14  |     11
 45 | 24  |     21
 65 | 34  |     31
(3 rows)

